AWSTemplateFormatVersion: '2010-09-09'
Description: 'RoomieMatcher - Load Balancer and ECS Services'

Parameters:
  EnvironmentName:
    Description: Environment name (dev, staging, prod)
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod

Resources:
  # Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-roomie-matcher-lb
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Subnets:
        - Fn::ImportValue: !Sub ${EnvironmentName}-PublicSubnet1
        - Fn::ImportValue: !Sub ${EnvironmentName}-PublicSubnet2
      SecurityGroups:
        - Fn::ImportValue: !Sub ${EnvironmentName}-ApplicationSecurityGroup
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
  
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApiGatewayTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  
  ApiGatewayTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /actuator/health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Sub ${EnvironmentName}-api-gateway-tg
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId: 
        Fn::ImportValue: !Sub ${EnvironmentName}-VPC
  
  # ECS Services
  AuthService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${EnvironmentName}-auth-service
      Cluster: 
        Fn::ImportValue: !Sub ${EnvironmentName}-ECSCluster
      TaskDefinition: 
        Fn::ImportValue: !Sub ${EnvironmentName}-AuthServiceTaskDefinition
      LaunchType: FARGATE
      DesiredCount: !If [IsProd, 2, 1]
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${EnvironmentName}-ApplicationSecurityGroup
          Subnets:
            - Fn::ImportValue: !Sub ${EnvironmentName}-PrivateSubnet1
            - Fn::ImportValue: !Sub ${EnvironmentName}-PrivateSubnet2
      ServiceRegistries:
        - RegistryArn: 
            Fn::ImportValue: !Sub ${EnvironmentName}-AuthServiceDiscovery
          Port: 8081
  
  ProfileService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${EnvironmentName}-profile-service
      Cluster: 
        Fn::ImportValue: !Sub ${EnvironmentName}-ECSCluster
      TaskDefinition: 
        Fn::ImportValue: !Sub ${EnvironmentName}-ProfileServiceTaskDefinition
      LaunchType: FARGATE
      DesiredCount: !If [IsProd, 2, 1]
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${EnvironmentName}-ApplicationSecurityGroup
          Subnets:
            - Fn::ImportValue: !Sub ${EnvironmentName}-PrivateSubnet1
            - Fn::ImportValue: !Sub ${EnvironmentName}-PrivateSubnet2
      ServiceRegistries:
        - RegistryArn: 
            Fn::ImportValue: !Sub ${EnvironmentName}-ProfileServiceDiscovery
          Port: 8082
  
  MatchService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${EnvironmentName}-match-service
      Cluster: 
        Fn::ImportValue: !Sub ${EnvironmentName}-ECSCluster
      TaskDefinition: 
        Fn::ImportValue: !Sub ${EnvironmentName}-MatchServiceTaskDefinition
      LaunchType: FARGATE
      DesiredCount: !If [IsProd, 2, 1]
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${EnvironmentName}-ApplicationSecurityGroup
          Subnets:
            - Fn::ImportValue: !Sub ${EnvironmentName}-PrivateSubnet1
            - Fn::ImportValue: !Sub ${EnvironmentName}-PrivateSubnet2
      ServiceRegistries:
        - RegistryArn: 
            Fn::ImportValue: !Sub ${EnvironmentName}-MatchServiceDiscovery
          Port: 8083
  
  NotificationService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${EnvironmentName}-notification-service
      Cluster: 
        Fn::ImportValue: !Sub ${EnvironmentName}-ECSCluster
      TaskDefinition: 
        Fn::ImportValue: !Sub ${EnvironmentName}-NotificationServiceTaskDefinition
      LaunchType: FARGATE
      DesiredCount: !If [IsProd, 2, 1]
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${EnvironmentName}-ApplicationSecurityGroup
          Subnets:
            - Fn::ImportValue: !Sub ${EnvironmentName}-PrivateSubnet1
            - Fn::ImportValue: !Sub ${EnvironmentName}-PrivateSubnet2
      ServiceRegistries:
        - RegistryArn: 
            Fn::ImportValue: !Sub ${EnvironmentName}-NotificationServiceDiscovery
          Port: 8084
  
  ApiGatewayService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${EnvironmentName}-api-gateway
      Cluster: 
        Fn::ImportValue: !Sub ${EnvironmentName}-ECSCluster
      TaskDefinition: 
        Fn::ImportValue: !Sub ${EnvironmentName}-ApiGatewayTaskDefinition
      LaunchType: FARGATE
      DesiredCount: !If [IsProd, 2, 1]
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${EnvironmentName}-ApplicationSecurityGroup
          Subnets:
            - Fn::ImportValue: !Sub ${EnvironmentName}-PublicSubnet1
            - Fn::ImportValue: !Sub ${EnvironmentName}-PublicSubnet2
      ServiceRegistries:
        - RegistryArn: 
            Fn::ImportValue: !Sub ${EnvironmentName}-ApiGatewayServiceDiscovery
          Port: 8080
      LoadBalancers:
        - ContainerName: api-gateway
          ContainerPort: 8080
          TargetGroupArn: !Ref ApiGatewayTargetGroup

Conditions:
  IsProd: !Equals [!Ref EnvironmentName, 'prod']

Outputs:
  LoadBalancerDNS:
    Description: Load Balancer DNS Name
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-LoadBalancerDNS 