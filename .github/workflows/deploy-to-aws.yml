name: Deploy to AWS Elastic Beanstalk

on:
  push:
    branches:
      - main  # or your production branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
          cache: maven

      - name: Make mvnw executable
        run: chmod +x mvnw

      
      - name: Build with Maven
        run: ./mvnw clean package -DskipTests
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push Docker image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: roomiematcher
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Update Dockerrun.aws.json with new image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: roomiematcher
          IMAGE_TAG: ${{ github.sha }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          AWS_SES_ACCESS_KEY: ${{ secrets.AWS_SES_ACCESS_KEY }}
          AWS_SES_SECRET_KEY: ${{ secrets.AWS_SES_SECRET_KEY }}
          AWS_SES_REGION: ${{ secrets.AWS_SES_REGION }}
          AWS_SES_FROM_EMAIL: ${{ secrets.AWS_SES_FROM_EMAIL }}
          NOTIFICATION_PROVIDER: ${{ secrets.NOTIFICATION_PROVIDER }}
        run: |
          sed -i "s|\${AWS_ACCOUNT_ID}|$AWS_ACCOUNT_ID|g" Dockerrun.aws.json
          sed -i "s|\${AWS_REGION}|$AWS_REGION|g" Dockerrun.aws.json
          sed -i "s|\${JWT_SECRET}|$JWT_SECRET|g" Dockerrun.aws.json
          sed -i "s|\${DB_USERNAME}|$DB_USERNAME|g" Dockerrun.aws.json
          sed -i "s|\${DB_PASSWORD}|$DB_PASSWORD|g" Dockerrun.aws.json
          sed -i "s|\${MAIL_HOST}|$MAIL_HOST|g" Dockerrun.aws.json
          sed -i "s|\${MAIL_PORT}|$MAIL_PORT|g" Dockerrun.aws.json
          sed -i "s|\${MAIL_USERNAME}|$MAIL_USERNAME|g" Dockerrun.aws.json
          sed -i "s|\${MAIL_PASSWORD}|$MAIL_PASSWORD|g" Dockerrun.aws.json
          sed -i "s|\${AWS_SES_ACCESS_KEY}|$AWS_SES_ACCESS_KEY|g" Dockerrun.aws.json
          sed -i "s|\${AWS_SES_SECRET_KEY}|$AWS_SES_SECRET_KEY|g" Dockerrun.aws.json
          sed -i "s|\${AWS_SES_REGION}|$AWS_SES_REGION|g" Dockerrun.aws.json
          sed -i "s|\${AWS_SES_FROM_EMAIL}|$AWS_SES_FROM_EMAIL|g" Dockerrun.aws.json
          sed -i "s|\${NOTIFICATION_PROVIDER}|$NOTIFICATION_PROVIDER|g" Dockerrun.aws.json
      
      - name: Generate deployment package
        run: |
          mkdir -p deploy_package
          cp -r .ebextensions deploy_package/
          cp Dockerrun.aws.json deploy_package/
          cd deploy_package && zip -r ../deploy.zip .
      
      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: roomiematcher
          environment_name: roomiematcher-prod
          version_label: ${{ github.sha }}
          region: ${{ secrets.AWS_REGION }}
          deployment_package: deploy.zip
          wait_for_environment_recovery: 300 